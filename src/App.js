import React, { useState, useEffect } from "react";
import "./App.css";
import { LocalNotifications } from "@capacitor/local-notifications";
import { Share } from "@capacitor/share";
import { Camera, CameraResultType, CameraSource } from "@capacitor/camera";

function App() {
  const [height, setHeight] = useState("");
  const [weight, setWeight] = useState("");
  const [bmi, setBmi] = useState(null);
  const [result, setResult] = useState("");
  const [photo, setPhoto] = useState(null); // Hi·ªÉn th·ªã ·∫£nh
  const [photoPath, setPhotoPath] = useState(null); // D√πng ƒë·ªÉ chia s·∫ª
  const [message, setMessage] = useState("");

  // üîî Xin quy·ªÅn th√¥ng b√°o khi m·ªü app
  useEffect(() => {
    const setupNotifications = async () => {
      const perm = await LocalNotifications.requestPermissions();
      if (perm.display === "granted") {
        await LocalNotifications.registerActionTypes({
          types: [{ id: "default", actions: [{ id: "ok", title: "OK" }] }],
        });
      }
    };
    setupNotifications();
  }, []);

  // üì∏ Ch·ª•p ho·∫∑c ch·ªçn ·∫£nh
  const takePhoto = async () => {
    try {
      const image = await Camera.getPhoto({
        quality: 90,
        allowEditing: false,
        resultType: CameraResultType.Uri,
        source: CameraSource.Prompt,
        saveToGallery: true,
      });

      setPhoto(image.webPath); // Hi·ªÉn th·ªã
      setPhotoPath(image.path || image.webPath); // D√πng ƒë·ªÉ chia s·∫ª
      setMessage("ƒê√£ ch·ªçn/ch·ª•p ·∫£nh v√† l∆∞u v√†o th∆∞ vi·ªán.");
    } catch (error) {
      setMessage("Ch·ª•p ho·∫∑c ch·ªçn ·∫£nh b·ªã l·ªói ho·∫∑c b·ªã h·ªßy.");
    }
  };

  // ‚öñÔ∏è T√≠nh BMI v√† g·ª≠i th√¥ng b√°o
  const calculateBMI = async () => {
    if (!height || !weight) {
      setMessage("Vui l√≤ng nh·∫≠p ƒë·ªß chi·ªÅu cao v√† c√¢n n·∫∑ng.");
      setBmi(null);
      setResult("");
      return;
    }

    const h = parseFloat(height) / 100;
    const w = parseFloat(weight);
    const bmiValue = (w / (h * h)).toFixed(1);
    setBmi(bmiValue);

    let status = "";
    if (bmiValue < 18.5) status = "G·∫ßy";
    else if (bmiValue < 25) status = "B√¨nh th∆∞·ªùng";
    else if (bmiValue < 30) status = "Th·ª´a c√¢n";
    else status = "B√©o ph√¨";
    setResult(status);
    setMessage("");

    await LocalNotifications.schedule({
      notifications: [
        {
          title: "K·∫øt qu·∫£ BMI",
          body: `Ch·ªâ s·ªë BMI c·ªßa b·∫°n l√† ${bmiValue} (${status})`,
          id: Date.now(),
          schedule: { at: new Date(Date.now() + 1000) },
        },
      ],
    });
  };

  // üì§ Chia s·∫ª k·∫øt qu·∫£ BMI v√†/ho·∫∑c ·∫£nh
  const shareResult = async () => {
    if (!bmi && !photoPath) {
      await LocalNotifications.schedule({
        notifications: [
          {
            title: "Kh√¥ng th·ªÉ chia s·∫ª",
            body: "Vui l√≤ng t√≠nh BMI ho·∫∑c ch·ªçn ·∫£nh ƒë·ªÉ chia s·∫ª.",
            id: Date.now(),
            schedule: { at: new Date(Date.now() + 1000) },
          },
        ],
      });
      return;
    }

    try {
      if (photoPath) {
        // ‚úÖ C√≥ ·∫£nh
        await Share.share({
          title: "Chia s·∫ª k·∫øt qu·∫£ BMI",
          text: bmi
            ? `Ch·ªâ s·ªë BMI c·ªßa t√¥i l√† ${bmi} (${result}). Xem ·∫£nh c·ªßa t√¥i n√®!`
            : "Xem ·∫£nh c·ªßa t√¥i n√®!",
          files: [photoPath],
          dialogTitle: "Chia s·∫ª ·∫£nh v√† BMI",
        });
      } else if (bmi) {
        // ‚úÖ Ch·ªâ c√≥ BMI
        await Share.share({
          title: "Chia s·∫ª k·∫øt qu·∫£ BMI",
          text: `Ch·ªâ s·ªë BMI c·ªßa t√¥i l√† ${bmi} (${result})`,
          dialogTitle: "Chia s·∫ª ch·ªâ s·ªë BMI",
        });
      }

      await LocalNotifications.schedule({
        notifications: [
          {
            title: "Chia s·∫ª th√†nh c√¥ng",
            body: "B·∫°n ƒë√£ chia s·∫ª th√†nh c√¥ng!",
            id: Date.now(),
            schedule: { at: new Date(Date.now() + 1000) },
          },
        ],
      });
    } catch (error) {
      await LocalNotifications.schedule({
        notifications: [
          {
            title: "Chia s·∫ª th·∫•t b·∫°i",
            body: "ƒê√£ x·∫£y ra l·ªói khi chia s·∫ª.",
            id: Date.now(),
            schedule: { at: new Date(Date.now() + 1000) },
          },
        ],
      });
    }
  };

  return (
    <div className="App">
      <h1>T√≠nh ch·ªâ s·ªë BMI</h1>

      <input
        type="number"
        placeholder="Nh·∫≠p chi·ªÅu cao (cm)"
        value={height}
        onChange={(e) => setHeight(e.target.value)}
      />
      <input
        type="number"
        placeholder="Nh·∫≠p c√¢n n·∫∑ng (kg)"
        value={weight}
        onChange={(e) => setWeight(e.target.value)}
      />
      <button onClick={calculateBMI}>T√≠nh BMI</button>

      {message && <p style={{ color: "red" }}>{message}</p>}

      {bmi && (
        <div>
          <p>
            <strong>BMI:</strong> {bmi}
          </p>
          <p>
            <strong>ƒê√°nh gi√°:</strong> {result}
          </p>
        </div>
      )}

      <button onClick={shareResult}>Chia s·∫ª k·∫øt qu·∫£</button>

      <button onClick={takePhoto}>Ch·ª•p ho·∫∑c ch·ªçn ·∫£nh</button>

      <button
        onClick={async () => {
          await LocalNotifications.schedule({
            notifications: [
              {
                title: "Test th√¥ng b√°o",
                body: "Th√¥ng b√°o ƒëang ho·∫°t ƒë·ªông!",
                id: Date.now(),
                schedule: { at: new Date(Date.now() + 1000) },
              },
            ],
          });
        }}
      >
        Test Th√¥ng B√°o
      </button>

      {photo && (
        <div>
          <img
            src={photo}
            alt="·∫¢nh c·ªßa b·∫°n"
            style={{ width: "200px", marginTop: "10px" }}
          />
        </div>
      )}
    </div>
  );
}

export default App;
